// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkId       String    @unique @map("clerk_id")
  email         String    @unique
  name          String
  profileImage  String?   @map("profile_image")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  documents     Document[]
  resumes       Resume[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]

  @@map("users")
}

model Document {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  type        String   // "pdf" or "ppt"
  fileUrl     String   @map("file_url")
  content     String   // Extracted text content for LLM
  embeddings  Json?    // Vector embeddings for semantic search
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  chats       Chat[]

  @@map("documents")
}

model Chat {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  documentId  String?  @map("document_id")
  question    String   @db.Text
  answer      String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  document    Document? @relation(fields: [documentId], references: [id])

  @@map("chats")
}

model Resume {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  fileUrl         String   @map("file_url")
  content         String   // Extracted text content
  atsScore        Int?     @map("ats_score")
  feedback        Json?    // Structured feedback from LLM
  improvements    Json?    // Suggested improvements
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  mockInterviews  MockInterview[]

  @@map("resumes")
}

model MockInterview {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  resumeId    String   @map("resume_id")
  questions   Json     // Array of questions
  answers     Json?    // User's answers
  feedback    Json?    // LLM feedback on answers
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  resume      Resume   @relation(fields: [resumeId], references: [id])

  @@map("mock_interviews")
}

model Post {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  type        String   // "carpool", "event", "general"
  title       String
  content     String   @db.Text
  location    String?
  eventDate   DateTime? @map("event_date")
  // Carpool specific fields
  departure   String?
  destination String?
  seats       Int?
  price       Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("likes")
}
